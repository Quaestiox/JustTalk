// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createFriendShipStmt, err = db.PrepareContext(ctx, createFriendShip); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFriendShip: %w", err)
	}
	if q.createMessageStmt, err = db.PrepareContext(ctx, createMessage); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMessage: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteFriendShipStmt, err = db.PrepareContext(ctx, deleteFriendShip); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFriendShip: %w", err)
	}
	if q.deleteMessageStmt, err = db.PrepareContext(ctx, deleteMessage); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMessage: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getFriendShipStmt, err = db.PrepareContext(ctx, getFriendShip); err != nil {
		return nil, fmt.Errorf("error preparing query GetFriendShip: %w", err)
	}
	if q.getMessageStmt, err = db.PrepareContext(ctx, getMessage); err != nil {
		return nil, fmt.Errorf("error preparing query GetMessage: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserForUpdateStmt, err = db.PrepareContext(ctx, getUserForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserForUpdate: %w", err)
	}
	if q.listFriendShipStmt, err = db.PrepareContext(ctx, listFriendShip); err != nil {
		return nil, fmt.Errorf("error preparing query ListFriendShip: %w", err)
	}
	if q.listMessageStmt, err = db.PrepareContext(ctx, listMessage); err != nil {
		return nil, fmt.Errorf("error preparing query ListMessage: %w", err)
	}
	if q.listUserStmt, err = db.PrepareContext(ctx, listUser); err != nil {
		return nil, fmt.Errorf("error preparing query ListUser: %w", err)
	}
	if q.updateFriendShipStmt, err = db.PrepareContext(ctx, updateFriendShip); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFriendShip: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createFriendShipStmt != nil {
		if cerr := q.createFriendShipStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFriendShipStmt: %w", cerr)
		}
	}
	if q.createMessageStmt != nil {
		if cerr := q.createMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMessageStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteFriendShipStmt != nil {
		if cerr := q.deleteFriendShipStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFriendShipStmt: %w", cerr)
		}
	}
	if q.deleteMessageStmt != nil {
		if cerr := q.deleteMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMessageStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getFriendShipStmt != nil {
		if cerr := q.getFriendShipStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFriendShipStmt: %w", cerr)
		}
	}
	if q.getMessageStmt != nil {
		if cerr := q.getMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMessageStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserForUpdateStmt != nil {
		if cerr := q.getUserForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserForUpdateStmt: %w", cerr)
		}
	}
	if q.listFriendShipStmt != nil {
		if cerr := q.listFriendShipStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFriendShipStmt: %w", cerr)
		}
	}
	if q.listMessageStmt != nil {
		if cerr := q.listMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMessageStmt: %w", cerr)
		}
	}
	if q.listUserStmt != nil {
		if cerr := q.listUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserStmt: %w", cerr)
		}
	}
	if q.updateFriendShipStmt != nil {
		if cerr := q.updateFriendShipStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFriendShipStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                   DBTX
	tx                   *sql.Tx
	createFriendShipStmt *sql.Stmt
	createMessageStmt    *sql.Stmt
	createUserStmt       *sql.Stmt
	deleteFriendShipStmt *sql.Stmt
	deleteMessageStmt    *sql.Stmt
	deleteUserStmt       *sql.Stmt
	getFriendShipStmt    *sql.Stmt
	getMessageStmt       *sql.Stmt
	getUserStmt          *sql.Stmt
	getUserForUpdateStmt *sql.Stmt
	listFriendShipStmt   *sql.Stmt
	listMessageStmt      *sql.Stmt
	listUserStmt         *sql.Stmt
	updateFriendShipStmt *sql.Stmt
	updateUserStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                   tx,
		tx:                   tx,
		createFriendShipStmt: q.createFriendShipStmt,
		createMessageStmt:    q.createMessageStmt,
		createUserStmt:       q.createUserStmt,
		deleteFriendShipStmt: q.deleteFriendShipStmt,
		deleteMessageStmt:    q.deleteMessageStmt,
		deleteUserStmt:       q.deleteUserStmt,
		getFriendShipStmt:    q.getFriendShipStmt,
		getMessageStmt:       q.getMessageStmt,
		getUserStmt:          q.getUserStmt,
		getUserForUpdateStmt: q.getUserForUpdateStmt,
		listFriendShipStmt:   q.listFriendShipStmt,
		listMessageStmt:      q.listMessageStmt,
		listUserStmt:         q.listUserStmt,
		updateFriendShipStmt: q.updateFriendShipStmt,
		updateUserStmt:       q.updateUserStmt,
	}
}
